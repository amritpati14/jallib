--------------------------------------------------------
-- Title: single stepper motor library (unipolar or bipolar)
-- Author: Richard Zengerink, Copyright (c) 2009..2010, all rights reserved.
--
-- Adapted-by: Rob Hamerling (2016)
--
-- Compiler: 2.4q5
--
-- This file is part of jaluino  (http://jaluino.googlecode.com)
-- Released under the BSD license (http://www.opensource.org/licenses/bsd-license.php)
--
-- Description: Library for a single stepper motor. 
--              Includes configurable startup- en slowdown-curves
--              and optionally user-defined control patterns.
--              Designed and tested with a unipolar motor,
--              but can be used with a bipolar motor as well.  
--              Supports inverting and non-inverting buffer-ICs
-- .
-- Required declarations before including the library:
--    This library requires 4 control pins of the same nibble (half port)
--    Declare an alias for this nibble, 
--    for example when pins pin_B0 to pin_B3 are used:
--       alias stepper_coils           is  portb_low    
--       alias stepper_coils_direction is  portb_low_direction
--    and set the pins in output mode, like:
--       port_stepper_coils_direction = ALL_OUTPUT 
--    The wiring of the 4 pins to the coils is free.
--    (but must match the bit patterns in the arrays below).
-- .
--    A constant array of bit patterns is required
--    to specify the signal state for each half-step: 
--       const byte STEPPER_ARRAY[8] =  
--          { 
--          0b_0001,             -- coil a1
--          0b_0011,             -- coil 1a + 1b   
--          0b_0010,             -- coil 1b
--          0b_0110,             -- coil 1b + 2a
--          0b_0100,             -- coil 2a
--          0b_1100,             -- coil 2a + 2b 
--          0b_1000,             -- coil 2b
--          0b_1001              -- coil 2b + 1a 
--          }
--   These bit patterns are examples for a unipolar stepper motor and
--   are the defaults when the array is absent in the user program. 
--   The entries specify the bit pattern for every half step in
--   clock-wise rotation.
--   In full-step mode only the even entries of the array are used.
--   With bipolar stepper motors or with special buffer-ICs 
--   the appropriate patterns need be defined by the user program. 
--   In any case the bit pattern should match the actual wiring and
--   your definition of clockwise! 
-- .
--   Specify a bit constant to indicate when you use an inverting
--   buffer-IC to control the stepper motor:
--       const bit STEPPER_INVERTING_BUFFER = TRUE
--   When not specified the default behaviour is non-inverting.
-- .
--   A word constant must be declared which specifies the number of steps
--   for a complete rotation of the stepper motor axis in full-step mode,
--   for example:
--      const word STEPPER_STEPS_PER_ROTATION = 200       
-- .                                    
--   A bit variable 'stepper_cw' must be declared to specify the direction of
--   rotation. Value TRUE means 'clockwise' and FALSE 'counter-clockwise'.
--      var bit stepper_cw = TRUE
--   Make sure your wiring matches this setting and the way the stepper moves.
--   The value may be changed dynamically by the user program.
-- .
--   A bit variable 'stepper_fullstep' must be declared to indicate 
--   that the stepper must run at full-steps (TRUE) or half-steps (FALSE).
--      var bit stepper_fullstep = TRUE
--   The value may be changed dynamically by the user program.  
-- . 
-- Originally this library was designed for PICs with 16-bits wide Timer0.
-- This excluded the use of midrange PICs, which have only 8-bits Timer0.
-- A 16-bits timer is required to support a wide enough speedrange
-- of stepper motors. When using a PIC without a 16-bits wide Timer0 the
-- revised version of the library automatically selects Timer3 when
-- present.
-- . 
-- Available public procedures: 
--    stepper_run()     -- set motor speed (smoothly)  
--    stepper_stop()    -- stop motor (smoothly)
--    stepper_hold()    -- stop motor immediately and lock it (keep powered)
--    stepper_accel()   -- set acceleration ratio (smooth speeding-up)
--    stepper_decel()   -- set decellaration ratio (smooth breaking)
--    stepper_detach()  -- stop motor immediately and release it (power off)
--    stepper_attach()  -- lock motor in position (power on, no stepping)
--
-- Sources:
--
-- Dependencies: - This library uses Timer1 and 
--                 Timer0 if it is 16-bits wide, otherwize Timer3
--              
-- Notes: Log of changes 2016/02 
-- * loading of timers: word-operation in JAL (surrounded by timer off/on)
-- * changed global non-static variables which are used only in 
--   one procedure into local variables
-- * added support for other Fosc values than 48 MHz 
-- * introduced a constant 'STEPPER_INVERTING_BUFFER' to support
--   positive and negative logic for motor control (depending of buffer IC)
-- * stepper_attach() uses current entry in stepper array in stead of all zero
-- * added use of Timer3 for PICs with an 8-bit Timer0 (midrange)
-- * fixed 'flippering' effect which occurred randomly when switching 
--   from half-step ccw to full-step cw rotation.
-- * fixed very long first step when accellerating from zero speed.
-- * added, improved, aligned comments 
-- * renamed several variables/constants/procedures
-- * enforced Jallib standards, i.c. global names prefixed by  'stepper_' 
-- 

--------------------------------------------------------
------------------ Stepper timer initialisation  -------
--------------------------------------------------------
if defined(TMR0H) then           -- 16-bits timer0 present
   -- Initialize Timer0 for driving the steppermotor
   
   if defined(INTCON2_TMR0IP) then
      INTCON2_TMR0IP = HIGH      -- Select high priority interupts for Timer0 
   end if
   
   if defined(T0CON_TMR0ON) then
      T0CON_TMR0ON = OFF          -- do no start Timer0 yet
   end if
   
   if defined(T0CON_T08BIT) then
      T0CON_T08BIT = 0            -- clock width: 1 = 8-bits, 0 = 16-bit
   end if 
   
   T0CON_T0CS = 0                 -- clock source 1 = T0CKI pin, 0 = Foc/4
   T0CON_T0SE = 0                 -- clock source edge 1 = H=>L ON T0CKI pin, 0 = L=>H ON T0CKI pin
   T0CON_PSA = 0                  -- prescaler: 1 = no prescaller,  0 = with prescaler
   T0CON_T0PS = 0                 -- prescaler mask 0..7 (1:2 .. 1:256)
   --                             -- Note: 16-bits Timer0 required
   -- with Fosc = 48 MHz
   -- for a stepper motor with 200 steps/rotation maximum rpm: 
   -- = 48_000_000/4/prescaler_min/TMR0_min/STEPPER_STEPS_PER_ROTATION*60 
   -- = 48_000_000/4/2/TMR0_min/200*60 
   -- = 12_000_000/2/1/200*60
   -- = 30000 * 60 
   -- = 1800000 rpm 
   --
   -- for a stepper motor with 200 steps/rotation minimum rpm:
   -- = 48_000_000/4/prescaler_max/TMR0_max/STEPPER_STEPS_PER_ROTATION*60
   -- = 48_000_000/4/256/TMR0_max/200*60 
   -- = 12_000_000/256/65535/200*60 
   -- = 0.00358 * 60 
   -- = 0.21 rpm 
   
elsif defined(TMR3H) then        -- 16-bits timer3 present
   -- Initialize Timer3 for driving the steppermotor
     
   if defined(INTCON2_TMR0IP) then
      IPR2_TMR0IP = HIGH         -- Select high priority interupts for Timer3
   end if
   
   T3CON_TMR3ON = OFF                     -- do not start Timer3 yet
 
   if defined(PIE2_TMR3IE) then           -- aliases for different locations
      alias PIEX_TMR3IE is PIE2_TMR3IE    -- of TMR3IE/IF interrupt bits
      alias PIRX_TMR3IF is PIR2_TMR3IF 
   elsif defined(PIE3_TMR3IE) then      
      alias PIEX_TMR3IE is PIE3_TMR3IE 
      alias PIRX_TMR3IF is PIR3_TMR3IF 
   elsif defined(PIE4_TMR3IE) then          
      alias PIEX_TMR3IE is PIE4_TMR3IE 
      alias PIRX_TMR3IF is PIR4_TMR3IF 
   elsif defined(PIE5_TMR3IE) then           
      alias PIEX_TMR3IE is PIE5_TMR3IE 
      alias PIRX_TMR3IF is PIR5_TMR3IF 
   else
      _error "Could not find Timer3 interrupt bits"
   end if
         
-- T3CON_TMR3CS = 0b10  
   T3CON_TMR3CS = 0b11                    -- clock source LFINTOSC (31 KHz)
   T3CON_T3SYNC = FALSE                   -- no clock sync with Fosc
   T3CON_T3CKPS = 0                       -- prescaler 1:1
   
   if defined(T3GCON) then
      T3GCON = 0b0000_0000                -- free running Timer3
   end if
     
   -- with LFINTOSC = 31 KHz
   -- for a stepper motor with 200 steps/rotation maximum rpm: 
   -- = 31_000/prescaler_min/TMR3_min/STEPPER_STEPS_PER_ROTATION*60 
   -- = 31_000/1/1/200*60 
   -- = 9300 rpm 
   --
   -- for a stepper motor with 200 steps/rotation minimum rpm:
   -- = 31_000_000/prescaler_max/TMR3_max/STEPPER_STEPS_PER_ROTATION*60
   -- = 31_000/8/65535/200*60 
   -- = 0.018 rpm 

else
   _error "PIC does not have a 16-bits Timer0 or Timer3"
      
end if   

-- better keep speed setting between 0.3 to 300 rpm (is max OFF my tested motor)


-------------------------------------------------------------
----- Accelleration/decelleration timer initialisation  -----
-------------------------------------------------------------
-- Initialize Timer1 for fixed 0.01 seconds interrupt intervals
T1CON = 0b0000_0000           -- all zero
--                            -- Note: bits may vary between PIC types! 
-- T1CON_RD16                 -- 1 = register rd/wr in one 16 bit operation
--                            -- 0 = register rd/wr in two 8 bit operation
-- T1CON_T1RUN                -- 1 = device clock derived from T1 oscillator
--                            -- 0 = device clock derived from another source
-- T1CON_T1CKPS   (see below) -- prescaler: 0(1:1), 1(1:2), 2(1:4), 3(1:8)
-- T1CON_T1OSCEN              -- 1 = osc is enabled 0 = osc is shut OFF
-- T1CON_NT1SYNC              -- 1 = do not sync ext. clk  0 = sync ext.clk
-- T1CON_TMR1CS               -- 1 = ext. clock 0 = int. clock (Fosc/4)
-- T1CON_TMR1ON               -- 1 = enables timer1 0 =  disables timer 1
--                            -- Note: not all PICs have the same Timer1 bits!
-- 
-- For highest precision and for any Fosc
if (target_clock <= 24_000_000) then 
   T1CON_T1CKPS = 0                       -- prescaler 1:1
   const STEPPER_TIMER1_PRESCALE = 1
elsif (target_clock <= 48_000_000) then 
   T1CON_T1CKPS = 1                       -- prescaler 1:2
   const STEPPER_TIMER1_PRESCALE = 2
elsif (target_clock <= 96_000_000) then 
   T1CON_T1CKPS = 2                       -- prescaler 1:4
   const STEPPER_TIMER1_PRESCALE = 4
else
   T1CON_T1CKPS = 3                       -- prescaler 1:8
   const STEPPER_TIMER1_PRESCALE = 8
end if

const word STEPPER_TIMER1_RELOAD = 65535 - word(target_clock / 4 / STEPPER_TIMER1_PRESCALE / 100)

-- for example: Fosc = 48_000_000 (and thus prescaler 1:2)
-- set timer1 interval to 0.01 sec 
-- = 48_000_000/4/prescaler/100 
-- = 48_000_000/4/2/100 
-- = 60000
-- result: 48_000_000/4/2/60000 = 100 Hz (interval = 0.01 sec)

if defined(T1GCON) then
   T1GCON = 0b0000_0000                   -- free running Timer1 
end if


INTCON_PEIE = ENABLED                     -- enable peripheral interrupts 
INTCON_GIE = ENABLED                      -- enable interrupts 
                           


-- =====================================================
-- =============== Global variables  ===================
-- =====================================================
if !defined(stepper_cw) then              -- not user defined
   var bit stepper_cw = TRUE              -- TRUE is clockwise, FALSE = counter clockwise
                                          -- depends also on wiring!
end if              
if !defined(stepper_fullstep) then        -- not user defined
   var bit stepper_fullstep = TRUE        -- TRUE is full step, FALSE half step
end if

var bit  stepper_accel_active = FALSE     -- is set during accelleration
var bit  stepper_decel_active = FALSE     -- is set during decelleration

var bit  stepper_running = FALSE          -- is set during run and reset after stop
var bit  stepper_to_stop = FALSE          -- is set during stop slope and reset after stop

var bit  stepper_slope_speedset = FALSE   -- TRUE while accellerating/decellerating

var word stepper_accel_ratio = 0          -- accelleration ratio in rpm/sec
var word stepper_decel_ratio = 0          -- decelleration ratio in rpm/sec
var word stepper_steptimer_interval = 0   -- holds actual interval for Timer0

var word stepper_set_vel = 0              -- desired speed in 1/100 rpm
var word stepper_actual_vel = 0           -- actual speed in 1/100 rpm

var byte stepper_step_index = 0           -- index of step in full/half step array

if !defined(STEPPER_STEPS_PER_ROTATION) then
   const word STEPPER_STEPS_PER_ROTATION = 200
   _warn "Variable STEPPER_STEPS_PER_ROTATION not defined, defaulting to 200"
end if
 

if !defined(STEPPER_ARRAY) then
   -- Default bit patterns for half steps (full steps: even entries)
   const byte STEPPER_ARRAY[8] =  
      {  
      0b_0001,
      0b_0011,
      0b_0010,
      0b_0110,
      0b_0100,
      0b_1100,
      0b_1000,
      0b_1001
      }
end if

if !defined(STEPPER_INVERTING_BUFFER) then
   const bit STEPPER_INVERTING_BUFFER = FALSE
end if



-- ==================================================
-- ========== Private Procedures ====================
-- ==================================================
    
-- --------------------------------------------------
-- Activate timer1 interrupts (100 per second)
-- --------------------------------------------------
procedure stepper_timer1_on()  is
   T1CON_TMR1ON = OFF      -- disable timer 1 before writing
   TMR1 = 0                -- clear timer before enabling interrupts  
   PIR1_TMR1IF = OFF       -- clear interrupt flag for next interrupt
   PIE1_TMR1IE = ON        -- enable timer1 interrupt 
   TMR1 = STEPPER_TIMER1_RELOAD -- load timer1 for 100 Hz
   T1CON_TMR1ON = ON       -- enable timer1 
end procedure


-- --------------------------------------------------
-- Deactivate timer1 interrupts
-- --------------------------------------------------
procedure stepper_timer1_off()  is
   T1CON_TMR1ON = OFF     -- set timer1 OFF
   PIE1_TMR1IE = OFF      -- disable timer1 interrupt
   PIR1_TMR1IF = OFF      -- clear interrupt flag
end procedure


-- -----------------------------------------------------------------
-- Descr:   Calculate interval for step-timer for specified RPM
-- Returns: Steptime in timer tick
-- Notes: - Prescaler value may be changed depending on speed.
--          Timer0: 1:2 for high speeds, 1:256 for low speeds
--          Timer3: 1:1                  1:8 
-- ------------------------------------------------------------------
function stepper_stepticks(word in rpm) return word is    

   var dword pulses_per_tsec                    -- number of pulses per 0.1 second
   
   pulses_per_tsec = dword(rpm) * STEPPER_STEPS_PER_ROTATION / 600  -- pulses per 0.1 sec
   if (stepper_fullstep == FALSE) then          -- half step mode                                 
      pulses_per_tsec = pulses_per_tsec * 2     -- double pulse rate
   end if          
                                
   if (pulses_per_tsec == 0) then
      pulses_per_tsec = 1                       -- minimum
   end if
   
   if defined(TMR0H) then
      if (pulses_per_tsec > 100) then           -- select low prescaler with high speeds
         T0CON_T0PS = 0b000                     -- prescaler => 1:2
         return word(target_clock/4/2/pulses_per_tsec)    
      else 
         T0CON_T0PS = 0b111                     -- prescaler => 1:256
         return word(target_clock/4/256/pulses_per_tsec)   
      end if
   elsif defined(TMR3H) then
      if (pulses_per_tsec > 100) then           -- select low prescaler with high speeds
         T3CON_T3CKPS = 0b00                    -- prescaler 1:1
         return word(31_000/1/pulses_per_tsec)       
      else
         T3CON_T3CKPS = 0b11                    -- prescaler 1:8
         return word(31_000/8/pulses_per_tsec) 
      end if      
   end if
   
end function



-- ======================================================
-- ============= Public Procedures ======================
-- ======================================================

-- ------------------------------------------------------
-- Descr: Immediately stop and lock stepper
-- ------------------------------------------------------
procedure stepper_hold() is 
   if defined(TMR0H) then 
      T0CON_TMR0ON = OFF                     -- stop timer0 and thus stop steppermotor
      INTCON_TMR0IE = OFF                    -- disable timer0 interrupts
   elsif defined(TMR3H) then
      T3CON_TMR3ON = OFF                     -- stop timer3 and thus stop steppermotor
      PIEX_TMR3IE = OFF                      -- disable timer3 interrupts
   end if
   stepper_running = FALSE                   -- )  
   stepper_to_stop = FALSE                   -- )
   stepper_decel_active = FALSE              -- ) reset all flags
   stepper_accel_active = FALSE              -- )
   stepper_slope_speedset = FALSE            -- )
   stepper_timer1_off()                      -- deactivate also timer1
end procedure
  
 
-- --------------------------------------------------------------
-- Descr: Immediately stop stepper and release the stepper (all coils power off)
-- --------------------------------------------------------------
procedure stepper_detach() is
   stepper_hold()
   if (STEPPER_INVERTING_BUFFER) then
      stepper_coils = 0b_1111            
   else
      stepper_coils = 0b_0000   
   end if
end procedure


-- --------------------------------------------------------------
-- Descr: (re-)power one coil 
-- --------------------------------------------------------------
procedure stepper_attach() is
   if (STEPPER_INVERTING_BUFFER) then
      stepper_coils = STEPPER_ARRAY[stepper_step_index] ^ 0b_1111                  
   else
      stepper_coils = STEPPER_ARRAY[stepper_step_index] 
   end if
end procedure


-- ---------------------------------------------------------------
-- Descr: Stop the stepper gradually according to decelleration ratio
-- Notes: One coil (maybe 2 with half-step) will remain powered, locks the stepper
--        Use stepper_detach() to remove power and unlock the stepper
-- ---------------------------------------------------------------
procedure stepper_stop() is                     
   if (stepper_decel_ratio == 0) then
      stepper_hold()                            -- decel = 0 thus stop stepper direct
      return
   end if
   stepper_accel_active = FALSE                 -- no (more) accelleration
   stepper_decel_active = TRUE                  -- decellerating
   stepper_to_stop = TRUE
   stepper_set_vel = 0                          -- set speed value to 0
   stepper_timer1_on()                          -- start timer1 for decelleration
end procedure


-- -----------------------------------------------------------------
-- Descr: Set stepper speed to desired RPM
-- Input: data (word) in 0.1 RPM   (50 means 5 RPM)
-- Notes: - Power to one (or two with halfstep) coils is applied automatically
--        - Depending on current speed and the specified accelleration and
--          decelleration settings the stepper speed may change gradually.  
--        - Use stepper_detach() to remove power (automatic with rpm zero)  
-- -----------------------------------------------------------------
procedure stepper_run(word in rpm) is              -- in units of 0.1 RPM

   var word steptimer_interval_new                 -- new timer0 interval
   
   if (stepper_slope_speedset) then                -- accellerating or decellerating 
      stepper_slope_speedset = FALSE               -- because it is slope_up/slope_down speed
      steptimer_interval_new = stepper_stepticks(rpm)   -- determine value for this speed
      stepper_steptimer_interval = steptimer_interval_new    -- new step interval
      return
   end if

   if (stepper_running) then                       -- 
      if (rpm == 0) then                           -- specified new speed 0: stop stepper
         stepper_stop()
         return
      end if
      steptimer_interval_new = stepper_stepticks(rpm)   -- new interval for this RPM
      stepper_set_vel = (rpm * 10)                 -- set_vel is 10 times data for accuracy
      if (stepper_set_vel > stepper_actual_vel) then  -- new speed faster
         if (stepper_accel_ratio == 0) then        -- check for using slope or not
            stepper_steptimer_interval = steptimer_interval_new  
         else
            stepper_accel_active = TRUE            -- set during accelleration
            stepper_decel_active = FALSE           -- consequently not decellerating 
            stepper_timer1_on()                    -- start timer1 for accelleration
         end if
      elsif (stepper_set_vel < stepper_actual_vel) then    -- new speed slower
         if (stepper_decel_ratio == 0) then        -- check for using slope or not
            stepper_steptimer_interval = steptimer_interval_new
         else
            stepper_decel_active = TRUE            -- set during decelleration
            stepper_accel_active = FALSE           -- consequently not accellerating
            stepper_timer1_on()                    -- start timer1 for decelleration
         end if
      end if
      if (rpm == 0) then
         stepper_stop()                             -- quiesce stepper controle
      end if
      return
   end if

   stepper_set_vel = rpm * 10                      -- set_vel is 10 times RPM for accuracy
   stepper_actual_vel = 0                          -- start: actual speed is 0
   if (stepper_accel_ratio == 0) then              -- no accel: step at desired speed immediately
      steptimer_interval_new = stepper_stepticks(rpm)
   else                                            -- accelleration
      steptimer_interval_new = stepper_stepticks(1)    -- (long) first step
      stepper_accel_active = TRUE                  -- flag set for accelleration
      stepper_decel_active = FALSE                 -- consequently not decellerating
      stepper_timer1_on()                          -- start timer1 for accelleration
   end if

   stepper_steptimer_interval = steptimer_interval_new       -- store new timer0 interval
   
   if defined(TMR0H) then
      T0CON_TMR0ON = OFF                           -- disable timer before write
      TMR0 = 65535                                 -- force fast timer0 overflow
      T0CON_TMR0ON = ON                            -- start timer0 and thus start steppermotor  
      INTCON_TMR0IE = ON                           -- enable timer0 interrupts
   elsif defined(TMR3H) then
      TMR3 = 0                                     -- clear TMR3 before enabling interrupts 
      PIRX_TMR3IF = OFF                            -- clear Timer3 interrupt flag   
      PIEX_TMR3IE = ON                             -- enable timer3 interrupts
      T3CON_TMR3ON = OFF                           -- disable timer before write
      TMR3 = 65535                                 -- force fast timer3 overflow
      T3CON_TMR3ON = ON                            -- start timer3 and thus start steppermotor 
   end if 
   stepper_running = TRUE                          -- stepping...
   
end procedure


-- -----------------------------------------------------------------
-- Descr: Determine accelleration ratio
-- Input: - sec      (word) number of 0.1 seconds
--        - rpm      (word) number of 0.1 RPM
-- Notes: - The stepper speed will increase with # RPMs per 10 ms
--          For example: with stepper_accel(100,3000) 
--          the stepper accellerates with 300 RPM in 10 seconds (30 RPM/sec)
--          Thus with it will accellerate in 2 seconds from 0 to 60 RPM 
--          or from 50 to 110 RPM, etc.
--        - Accelleration (and decelleration) settings are only taken into account
--          when stepper speed is changed, e.g. with stepper_run() or stepper_stop()
--          and may be changed any time.
-- -----------------------------------------------------------------
procedure stepper_accel(word in sec, word in rpm) is  
   if (sec > 0) then                               
      stepper_accel_ratio = rpm / sec           -- accelleration ratio (delta RPM per 10 ms)
   end if                        
end procedure

-- -----------------------------------------------------------------
-- Descr: Determine decelleration ratio
-- Input: - sec      (word) number of 0.1 seconds
--        - rpm      (word) number of 0.1 RPM
-- Notes: The stepper speed will decrease with # RPMs per 10 ms
--        See also the notes with stepper_accel() 
-- --------------------------------------------------------------------------------
procedure stepper_decel(word in sec, word in rpm) is   
   if (sec > 0) then                               
      stepper_decel_ratio = rpm / sec           -- decelleration ratio (delta RPM per 10 ms)
   end if                          
end procedure



-- =========================================================
-- ============== Interrupt Handlers =======================
-- =========================================================


-- ---------------------------------------------
-- -------   Step timer interrupt handler ------
-- ---------------------------------------------
procedure stepper_steptimer_isr() is

   pragma interrupt
  
   if defined(TMR0H) then
      if !(INTCON_TMR0IF & INTCON_TMR0IE) then  -- not an expected timer0 interrupt
         return      
      end if 
   elsif defined(TMR3H) then
      if !(PIRX_TMR3IF & PIEX_TMR3IE) then      -- not an expected timer3 interrupt
         return
      end if 
   end if       
 
   if defined(TMR0H) then
      T0CON_TMR0ON = OFF                           -- disable timer0 before write
      TMR0 = 65535 - stepper_steptimer_interval    -- reload timer0
      T0CON_TMR0ON = ON                            -- reenable timer0
   elsif defined(TMR3H) then
      T3CON_TMR3ON = OFF                           -- disable timer3 before write
      TMR3 = 65535 - stepper_steptimer_interval    -- reload timer3-
      T3CON_TMR3ON = ON                            -- reenable timer3
   end if
                                                   -- determine next index in range 0..7 (wrap)
   if (stepper_cw == TRUE) then                    -- clockwise
      if (stepper_fullstep) then
         stepper_step_index = (stepper_step_index + 2) & (count(STEPPER_ARRAY) - 2)  -- even
      else
         stepper_step_index = (stepper_step_index + 1) & (count(STEPPER_ARRAY) - 1)
      end if
   else                                            -- counter clockwise
      if (stepper_fullstep) then
         stepper_step_index = (stepper_step_index - 2) & (count(STEPPER_ARRAY) - 2)  -- even 
      else
         stepper_step_index = (stepper_step_index - 1) & (count(STEPPER_ARRAY) - 1)
      end if
   end if
   
   if (STEPPER_INVERTING_BUFFER) then
      stepper_coils = STEPPER_ARRAY[stepper_step_index] ^ 0b_1111    -- invert bits
   else
      stepper_coils = STEPPER_ARRAY[stepper_step_index]
   end if
   
   if defined(TMR0H) then
      INTCON_TMR0IF = OFF                          -- clear interrupt flag for next interrupt
   elsif defined(TMR3H) then
      PIRX_TMR3IF = OFF
   end if
   
end procedure


-- ----------------------------------------------------------------
-- ---- Accelleration/Decelleration Timer interrupt handler --------
-- ----------------------------------------------------------------
procedure stepper_slope_timer_isr() is

   pragma interrupt
   
   if !(PIR1_TMR1IF & PIE1_TMR1IE) then            -- not an expected timer1 interrupt
      return 
   end if  
                                  
   PIR1_TMR1IF = OFF                               -- clear interrupt flag for next interrupt
   T1CON_TMR1ON = OFF                              -- disable timer before write
   TMR1 = STEPPER_TIMER1_RELOAD                    -- load timer1
   T1CON_TMR1ON = ON                               -- (re)enable timer1

   if (stepper_accel_active) then                  -- accellerating
      if (stepper_set_vel > (stepper_actual_vel + stepper_accel_ratio)) then -- if TRUE than accellerate
         stepper_actual_vel = stepper_actual_vel + stepper_accel_ratio       -- target speed is not yet reached
      else
         stepper_actual_vel = stepper_set_vel      -- target speed is reached and
         stepper_accel_active = FALSE              -- stop accelleration
         stepper_timer1_off()
      end if
      stepper_slope_speedset = TRUE                -- still accellerating/decellerating
      stepper_run(stepper_actual_vel/10)           -- pass real rpm
   end if
   
   if (stepper_decel_active) then                  -- decellerating       
      if (stepper_decel_ratio > stepper_actual_vel) then   -- if TRUE than desired speed is reached
         stepper_hold()                            -- and hold stepper and reset flags
      else
         if (stepper_set_vel < (stepper_actual_vel - stepper_decel_ratio)) then   -- if TRUE than decellerate 
            stepper_actual_vel = stepper_actual_vel - stepper_decel_ratio         -- target speed yet reached
         else
            if (stepper_to_stop) then
               stepper_hold()
            else
               stepper_actual_vel = stepper_set_vel   -- target speed is reached and
               stepper_decel_active = FALSE           -- stop decelleration
            end if
            stepper_timer1_off()
         end if
         stepper_slope_speedset = TRUE             -- still accellerating/decellerating
         stepper_run(stepper_actual_vel/10)        -- pass real rpm
      end if
   end if
   
end procedure

--------------------------------------------------------





