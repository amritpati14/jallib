-- Title: TC77 temperature library
-- Author: Matthew Schinkel - borntechi.com, copyright (c) 2011, all rights reserved.
-- Adapted-by:
-- Compiler: 2.4o
-- 
-- This file is part of jallib (https://github.com/jallib/jallib)
-- Released under the ZLIB license (http://www.opensource.org/licenses/zlib-license.html)
--
-- Description: This library reads temperature from TC77 through SPI.
--              TC77 has a resolution of 0.0625C from -55C to +125C
--
-- Sources:
-- TC77 temperature sensor library by Eur van Andel
-- http://www.microchip.com/wwwproducts/Devices.aspx?dDocName=en010750
--
-- Notes:
-- This is a complete re-write of the orignal jallib TC77 library
-- written by Eur van Andel.
--
-- Improvements:
-- Uses pesudo variables
-- tiny bit less code/ram usage.
-- cs line controlled by library (optional)
-- no ASM
-- Compatible with the jallib SPI library (hardware or software)
-- Less code used when using multiple devices since SPI code is shared.
--

if !defined(TC77_CS_IN_LIB) then
   const byte TC77_CS_IN_LIB = FALSE
end if

-- for compatibility only. You should define spi_master!
if !defined(spi_master) then
    alias spi_master_sw_sck is SCK
    alias spi_master_sw_sdo is SIO
    alias spi_master_sw_sdi is SIO
   --
   include spi_master_sw
   spi_master_sw_init(SPI_MODE_11) -- init spi, choose mode
   alias spi_master is spi_master_sw
   alias spi_master_set_speed is spi_master_sw_set_speed
   alias spi_master_set_mode is spi_master_sw_set_mode
end if

-- constants
var word _TC77_POS25C  = 0b0000110010000111
var word _TC77_NEG25C  = 0b1111001110000111
var word _TC77_POS125C = 0b0011111010000111
var word _TC77_NEG55C  = 0b1110010010000111

--------------------------------------------------------------------------------
-- Read Temperature (sbyte). Temperature x 1.
-- Example temperature output: 26
--------------------------------------------------------------------------------
function tc77_celsius_sbyte'get() return sbyte is
   var sword temperature
   var word _temperature at temperature
   var byte temperature_byte[2] at temperature
   var bit temperature_sign at temperature : 12

   if defined(tc77_force_spi_mode) == TRUE then
      tc77_force_spi_mode()
   end if

   if TC77_CS_IN_LIB == TRUE then
      TC77_CS = LOW -- enable tc77
   end if
   
   temperature_byte[1] = spi_master
   temperature_byte[0] = spi_master
   
   if TC77_CS_IN_LIB == TRUE then
      TC77_CS = HIGH -- disable tc77
   end if

   -- negitive temperature test
   ;_temperature = _TC77_NEG25C

   temperature = temperature >> 3

   -- fix negitive value
   if temperature_sign == 1 then
      _temperature = _temperature | 0xE000
   end if
   
   temperature = temperature / 16

   return sbyte(temperature)
end function


--------------------------------------------------------------------------------
-- Read Temperature (sword). Temperature x 100.
-- Example temperature output: 2662
--------------------------------------------------------------------------------
function tc77_celsius_sword'get() return sword is
   var sbyte*3 temperature = 0
   var byte*3 _temperature at temperature
   var byte temperature_byte[4] at temperature
   var bit temperature_sign at temperature : 12

   if defined(tc77_force_spi_mode) == TRUE then
      tc77_force_spi_mode()
   end if

   if TC77_CS_IN_LIB == TRUE then
      TC77_CS = LOW -- enable tc77
   end if
   
   temperature_byte[1] = spi_master
   temperature_byte[0] = spi_master
   
   if TC77_CS_IN_LIB == TRUE then
      TC77_CS = HIGH -- disable tc77
   end if

   -- negitive temperature test
   ;_temperature = _TC77_NEG25C

   temperature = temperature >> 3

   -- fix negitive value
   if temperature_sign == 1 then
      _temperature = _temperature | 0xFFE000
   end if

   -- calculate result
   temperature = temperature * 625 / 100

   return sword(temperature)
end function


--------------------------------------------------------------------------------
-- Read Temperature (sdword). Temperature x 10000.
-- Example temperature output: 266875
--------------------------------------------------------------------------------
function tc77_celsius_sdword'get() return sdword is
   var sbyte*3 temperature = 0
   var byte*3 _temperature at temperature
   var byte temperature_byte[4] at temperature
   var bit temperature_sign at temperature : 12

   if defined(tc77_force_spi_mode) == TRUE then
      tc77_force_spi_mode()
   end if

   if TC77_CS_IN_LIB == TRUE then
      TC77_CS = LOW -- enable tc77
   end if
   
   temperature_byte[1] = spi_master
   temperature_byte[0] = spi_master
   
   if TC77_CS_IN_LIB == TRUE then
      TC77_CS = HIGH -- disable tc77
   end if

   -- negitive temperature test
   ;_temperature = _TC77_NEG25C

   temperature = temperature >> 3
   
   -- fix negitive value
   if temperature_sign == 1 then
      _temperature = _temperature | 0xFFE000
   end if
   
   -- calculate result
   temperature = temperature * 625

   return sdword(temperature)
end function

--------------------------------------------------------------------------------
-- Read raw data from TC77
--------------------------------------------------------------------------------
procedure tc77_read_raw(word out raw) is
   var byte temperature_byte[2] at raw

   if TC77_CS_IN_LIB == TRUE then
      TC77_CS = LOW -- enable tc77
   end if
   
   temperature_byte[1] = spi_master
   temperature_byte[0] = spi_master
   
   if TC77_CS_IN_LIB == TRUE then
      TC77_CS = HIGH -- disable tc77
   end if
end procedure

--------------------------------------------------------------------------------
-- procedures for compatibility
--------------------------------------------------------------------------------
procedure tc77_read_celsius_sbyte(sbyte out temperature) is
   pragma inline
   temperature = tc77_celsius_sbyte
end procedure

procedure tc77_read_celsius_sword(sword out temperature) is
   pragma inline
   temperature = tc77_celsius_sword
end procedure

procedure tc77_read_celsius_sdword(sdword out temperature) is
   pragma inline
   temperature = tc77_celsius_sdword
end procedure
