#def main
-- -------------------------------------------------------------------------------------
-- Title: hardware PWM control, dedicated to module PWM${num}
-- Author: Stef Mientki, Copyright (C) 2002-2006, all rights reserved.
-- Adapted-by: Sebastien Lelong, Rob Hamerling.
-- Compiler: 2.4p
-- Revision: $Revision$
--
-- This file is part of jallib (http://jallib.googlecode.com)
-- Released under the ZLIB license (http://www.opensource.org/licenses/zlib-license.html)
--
-- Description:
-- Performs PWM operations on the PWM${num} module (of enhanced midrange)
-- This file is automatically included by pwm_hardware.jal
-- when the target PIC has a PWM${num} module.
--
-- Notes: 1. This is a heavy refactoring of the original pwm_hardware.jal
--           (Stef's lib)
--        2. Partly rewritten for JalV2 version 2.4l and Jallib revision 1171.
--           Reduced memory occupation. Added procedure for lowres PWM.
--        3. Changes dd October 2012 by Rob Hamerling
--           - added public procedure to set dutycycle with highest resolution (1023 steps).
--           - Make the pwm_set_dutycycle (highres, lowres and unqualified) private
--             (preceeded with an underscore). These procedures will be kept. but
--             with a 'deprecated' warning recommending to use the procedures for
--             relative settings.
--        4. Changes dd December 2016 by Rob Hamerling
--           - Changed 'PWM-mode' mask in pwm_on() from '1111' to 1100.
--             This selects PWM mode 'active high' on pin_CCP${num} in stead of
--             'active low' with PICs which support this mode, while it doesn't
--             make a difference for PICs which don't support active low mode.
--           - Removed deprecated procedures.
--
-- -------------------------------------------------------------------------------------

-- Below declarations rely on the same bit pattern of CPP1CON of ALL PICs!

var byte   _ccpr${num}l_shadow  = 0                           -- 8 MSbits of duty cycle
var byte   _ccp${num}con_shadow = 0b0000_0000                 -- shadow
var bit*2  _ccp${num}con_shadow_dc${num}b  at _ccp${num}con_shadow : 4  -- 2 LSbits of duty cycle
var bit*4  _ccp${num}con_shadow_ccp${num}m at _ccp${num}con_shadow : 0  -- 2 LSbits of duty cycle


-- -------------------------------------------------------------------------------------
-- Purpose:   Set PWM on
-- Arguments: none
-- Notes:     - duty cycle is restored from shadow registers
--            - pin_PWM${num}_direction should be set to output
-- -------------------------------------------------------------------------------------
procedure pwm${num}_on() is

   _ccp${num}con_shadow_ccp${num}m = 0b1100                  -- set CCP module in PWM mode
                                                            -- (active high for primary pin)
   CCPR${num}L                = _ccpr${num}l_shadow          -- restore duty cycle
   CCP${num}CON               = _ccp${num}con_shadow         -- activate CCP module

end procedure


-- -------------------------------------------------------------------------------------
-- Purpose:   PWM mode off
-- Arguments: none
-- -------------------------------------------------------------------------------------
procedure pwm${num}_off() is

   _ccp${num}con_shadow_ccp${num}m = 0b0000                  -- CCP/PWM off
   CCP${num}CON               = _ccp${num}con_shadow         -- disable CCP module

end procedure


-- -------------------------------------------------------------------------------------
-- Purpose:   Specify the duty cycle by number of PWM steps.
--            The duty cycle is setting is determined by a 10-bits parameter,
--            allowing a resolution of 1023 steps.
--            The 'steps' argument is a (max) 10-bits absolute value for the duty cycle:
--            * steps<1:0> are the 2 LSbits
--            * steps<9:2> are the 8 MSbits
-- Arguments: word - steps cycle (allowed range 0..1023)
-- Notes:     - This is a private procedure, not intended for general use.
--              The caller is responsible to specify an acceptable value
--              w.r.t. to the chosen PWM frequency.
-- -------------------------------------------------------------------------------------
procedure _pwm${num}_set_dutycycle_highres(word in steps) is

   if (steps > 1023) then                           -- exceeding upper limit
      steps = 1023                                  -- set to maximum
   end if
   _ccpr${num}l_shadow = byte(steps >> 2)
   _ccp${num}con_shadow_dc${num}b = byte(steps) & 0b11

   pwm${num}_on()                                        -- activate PWM

end procedure


-- -------------------------------------------------------------------------------------
-- Purpose:   Set duty cycle as a percentage, allowing max 100 PWM steps.
--            The duty cycle will be set to the specified percentage of the maximum
--            for the current PWM frequency and Fosc.
-- Arguments: byte - dutycycle as a percentage (allowed range: 0..100)
-- Notes:     - The number of available PWM steps can be lower than 100 with
--              (very) high PWM frequencies and low Fosc.
--            - The steps may not all be equal. The lower the actual resolution
--              the bigger the differences between steps may be.
--            - pin_CCP${num}_direction is expected to be set to output!
-- -------------------------------------------------------------------------------------
procedure pwm${num}_set_dutycycle_percent(byte in percent) is

   var word steps                                   --
   if (percent == 0) then                          -- effectively PWM off (output low)
     steps = 0
   elsif (percent >= 100) then                     -- effectively PWM off (output high)
     steps = _pr2_shadow_plus1 - 1
   else                                            --
     steps = word(percent) * _pr2_shadow_plus1 / 100      -- (factor PR2/100)
   end if
   _pwm${num}_set_dutycycle_highres(steps << 2)

end procedure


-- -------------------------------------------------------------------------------------
-- Purpose:   Set duty cycle in the range 0..1023 PWM steps.
-- Arguments: word - dutycycle ration in range 0..1023
-- Notes:     - The duty cycle will be set to the specified ration of the maximum
--              value for the current PWM frequency and Fosc.
--            - The resolution is about 1 pro mille
--            - The number of available PWM steps can be lower than 1023 with
--              high PWM frequencies or low Fosc values.
--            - pin_CCP${num}_direction should be set to output!
-- -------------------------------------------------------------------------------------
procedure pwm${num}_set_dutycycle_ratio(word in ratio) is

   var  word  steps                                  -- intermediate value of PR2+1
   if (ratio == 0) then                            -- effectively PWM off (output low)
     steps = 0
   elsif (ratio > 1023) then                       -- effectively PWM off (output high)
     steps = _pr2_shadow_plus1 - 1
   else                                            -- between min and max
     steps = word(dword(ratio) * _pr2_shadow_plus1 / 256)    -- (factor PR2/1024)
   end if
   _pwm${num}_set_dutycycle_highres(steps)

end procedure

#end def
$main
