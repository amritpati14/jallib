-- ------------------------------------------------------
-- Title: Sample data EEPROM write and read for the Microchip PIC16F88
-- 
-- Author: Rob Hamerling, Copyright (c) 2008..2014, all rights reserved.
-- 
-- Adapted-by: Albert Faber, Joep Suijs
-- 
-- Compiler: >=2.4q2
-- Revision: $Revision$
-- 
-- This file is part of jallib  (https://github.com/jallib/jallib)
-- Released under the BSD license (http://www.opensource.org/licenses/bsd-license.php)
--  
-- Description:
-- Sample data EEPROM write and read for the Microchip PIC16F88
--  
-- Sources:
-- 
-- Notes: Includes blink-an-LED
-- 
-- ------------------------------------------------------
--
-- This file has been generated by jallib.py from:
--    * board: board_16f88_js.jal
--    * test : test_data_eeprom.jal
--

;@jallib section chipdef
-- chip setup
include 16f88

;--
;-- This setup assumes a 20 MHz resonator or crystal
;-- is connected to pins OSC1 and OSC2.
pragma target OSC       HS             -- HS crystal or resonator
pragma target clock     20_000_000     -- oscillator frequency
pragma target WDT       disabled       -- no watchdog
pragma target LVP       disabled       -- no low-voltage programming
pragma target CCP1MUX   pin_B3         -- ccp1 pin on B3

--
-- This setup uses the internal oscillator
;pragma target OSC       INTOSC_NOCLKOUT   -- internal oscillator
;pragma target clock     8_000_000         -- oscillator frequency
;pragma target WDT       disabled          -- no watchdog
;pragma target LVP       disabled          -- no low-voltage programming
;pragma target CCP1MUX   pin_B3            -- ccp1 pin on B3
;OSCCON_IRCF = 7                           -- set prescaler to 1 (8 MHz)



enable_digital_io()                     -- disable analog modules

include pic_data_eeprom
;@jallib section led
-- LED IO definition
alias led             is pin_b3
alias led_direction   is pin_b3_direction
alias led2            is pin_b1
alias led2_direction  is pin_b1_direction
led_direction = output

var byte i = 0                          -- counter

forever loop

  led = on
  _usec_delay(250000)                   -- wait a little
  led = off
  _usec_delay(250000)

  data_eeprom_write(i,i)                -- write counter
  i = data_eeprom(i)                    -- read back
  i = i + 1

end loop

