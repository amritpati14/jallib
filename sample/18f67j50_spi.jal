-- Title: SPI example
-- Author: Matthew Schinkel - borntechi.com, copyright (c) 2009, all rights reserved.
-- Adapted-by:
-- Compiler: >=2.4q3
--
-- This file is part of jallib (https://github.com/jallib/jallib)
-- Released under the BSD license (http://www.opensource.org/licenses/bsd-license.php)
--
-- Description: This sample sends data via SPI.
--
-- This file has been generated by hand (manually maintained)
--
-- Sources:
--
-- Notes:
--

include 18f67j50                      -- target PICmicro
--
-- This program uses the internal oscillator with PLL active.
pragma target clock 48_000_000      -- oscillator frequency
--
pragma target OSC      INTOSC_NOCLKOUT_PLL       -- internal oscillator
pragma target PLLDIV   P2                        -- 8 MHz -> 4 MHz
pragma target CPUDIV   P1                        -- Fosc divisor
pragma target WDT      CONTROL                   -- watchdog
pragma target XINST    DISABLED                  -- extended instruction set
pragma target DEBUG    DISABLED                  -- debugging
pragma target FCMEN    DISABLED                  -- clock monitoring
pragma target IESO     DISABLED                  -- int/ext osc. switch
--
-- The configuration bit settings above are only a selection, sufficient
-- for this program. Other programs may need more or different settings.
--
WDTCON_SWDTEN = OFF                 -- disable WDT
OSCCON_SCS = 0                      -- select primary oscillator
OSCTUNE_PLLEN = TRUE                -- use PLL
--
enable_digital_io()                 -- make all pins digital I/O
--
include delay                       -- library with delay procedures
include print

-- setup SPI library
include spi_master_hw         -- includes the spi library
-- define spi inputs/outputs
pin_sdi_direction = input    -- spi input
pin_sdo_direction = output   -- spi output
pin_sck_direction = output   -- spi clock
--
spi_init(SPI_MODE_11,SPI_RATE_FOSC_16) -- init spi, choose mode and speed
alias spi_master is spi_master_hw
alias spi_master_exchange is spi_master_hw_exchange

-- setup the SPI chip select pin
alias sd_chip_select is pin_a1
alias sd_chip_select_direction is pin_a1_direction
sd_chip_select = high
sd_chip_select_direction = output

-- Setup a led to blink while we send data
alias  led       is pin_A0          -- alias for pin with LED
pin_A0_direction = OUTPUT

procedure spi_send'put(byte in data) is
   sd_chip_select = low  -- enable the SPI device
   spi_master = data      -- send data
   sd_chip_select = high -- disable the SPI device
end procedure

-- Main program
forever loop
   led = ON
   print_string(spi_send,"TEST")
   print_crlf(spi_send)
   delay_1ms(10)
   led = OFF
   spi_send = "."
   print_crlf(spi_send)
   delay_1ms(10)
end loop
