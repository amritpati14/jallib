-- ------------------------------------------------------
-- Title: Calendar demo
--
-- Author: Oliver "Kiste" Seitz  Copyright (c) 2012, all rights reserved.
--
-- Adapted-by:
--
-- Compiler: 2.4o
--
-- This file is part of jallib  (https://github.com/jallib/jallib)
-- Released under the BSD license (http://www.opensource.org/licenses/bsd-license.php)
--
-- Description:
-- Demonstration program for Microchip PIC16f688 using big_calendar.jal
--
-- This file has been generated by hand (manually maintained)
--
-- Sources:
--
-- Notes:
--
-- ------------------------------------------------------
--
include 16f688                    -- target PICmicro
--
-- This program assumes that an external oscillator generates a
-- 20 MHz signal which is connected to pin OSC1.
pragma target clock 20_000_000     -- oscillator frequency
-- configuration memory settings (fuses)
pragma target OSC      EC_NOCLKOUT               -- external clock
pragma target WDT      disabled     -- no watchdog
pragma target MCLR     internal     -- no reset pin
-- These configuration bit settings are only a selection, sufficient for
-- this program, but other programs may need more or different settings.
--
enable_digital_io()                -- make all pins digital I/O

include big_calendar

var byte*3 timer_counts = 0 

procedure timer1_isr() is
  pragma interrupt

  if PIR1_TMR1IF == true then

    PIR1_TMR1IF=false

    timer_counts=timer_counts+65536

    if timer_counts > ( target_clock / 32 ) then -- 32 = 4*8, 4= Fosc/Fc; 8=prescaler value 

      timer_counts=timer_counts-( target_clock / 32 )
      bigcal_current_time.second = bigcal_current_time.second + 1

    end if 


  end if

end procedure



include delay

const serial_hw_baudrate=9600
include serial_hardware

serial_hw_init

alias serial_data is serial_hw_data

include print


bigcal_current_date.year=2009
bigcal_current_date.month=12
bigcal_current_date.day=31


procedure print_date() is
  
  print_crlf(serial_data)


  const byte string_sun[]="   Sunday"
  const byte string_mon[]="   Monday"
  const byte string_tue[]="  Tuesday"
  const byte string_wed[]="Wednesday"
  const byte string_thu[]=" Thursday"
  const byte string_fri[]="   Friday"
  const byte string_sat[]=" Saturday"

   case bigcal_weekday(bigcal_current_date) of
      0:print_string(serial_data,string_sun)
      1:print_string(serial_data,string_mon)
      2:print_string(serial_data,string_tue)
      3:print_string(serial_data,string_wed)
      4:print_string(serial_data,string_thu)
      5:print_string(serial_data,string_fri)
      6:print_string(serial_data,string_sat)
   end case

   const byte string_jan[]="  January"
   const byte string_feb[]=" February"
   const byte string_mar[]="    March"
   const byte string_apr[]="    April"
   const byte string_may[]="      May"
   const byte string_jun[]="     June"
   const byte string_jul[]="     July"
   const byte string_aug[]="   August"
   const byte string_sep[]="September"
   const byte string_oct[]="  October"
   const byte string_nov[]=" November"
   const byte string_dec[]=" December"  -- Wouldn't it be nice to have 2-dimensional constant arrays...? ;-)

   serial_data=","
   serial_data=" "

   case bigcal_current_date.month of
      1:print_string(serial_data,string_jan)
      2:print_string(serial_data,string_feb)
      3:print_string(serial_data,string_mar)
      4:print_string(serial_data,string_apr)
      5:print_string(serial_data,string_may)
      6:print_string(serial_data,string_jun)
      7:print_string(serial_data,string_jul)
      8:print_string(serial_data,string_aug)
      9:print_string(serial_data,string_sep)
     10:print_string(serial_data,string_oct)
     11:print_string(serial_data,string_nov)
     12:print_string(serial_data,string_dec)
   end case

   serial_data=" "
   print_byte_dec(serial_data,bigcal_current_date.day)
   serial_data="."
   print_word_dec(serial_data,bigcal_current_date.year)


end procedure


delay_1s(5)

print_date

print_sword_dec(serial_data,-30000)
print_crlf(serial_data)

bigcal_add_days(bigcal_current_date,-30000)
print_date()

serial_data="+"
serial_data="6"
print_crlf(serial_data)

bigcal_add_days(bigcal_current_date,6)
print_date()

for 30 loop

   serial_data="+"
   print_word_dec(serial_data,1000)
   print_crlf(serial_data)

   bigcal_add_days(bigcal_current_date,1000)
   print_date()


end loop


print_crlf(serial_data)



bigcal_current_date.year=1980



for 50 loop -- display some dates for easter sunday

   bigcal_find_easter(bigcal_current_date)  
   print_date()
   bigcal_add_days(bigcal_current_date,365)




end loop

delay_1s(5)


bigcal_current_date.month=10
bigcal_current_date.day=15
bigcal_current_date.year=1582
var byte day_of_week=5 -- first day of the gregorian calendar

const byte string_ok[]=": OK!"
const byte string_error[]=": ERROR!!!!"


for 10000 loop -- check a few weekday calculations

       
   if day_of_week != bigcal_weekday(bigcal_current_date) then
      print_crlf(serial_data)
      print_date()
      print_string(serial_data,string_error)
      print_crlf(serial_data)
      forever loop end loop  -- the program will end here on the first error. 
                             -- There will be an error, at least when "year" rolls over.
   end if

   if bigcal_current_date.day==31 then
      if bigcal_current_date.month==12 then
         print_word_dec(serial_data,bigcal_current_date.year)  -- output the number of each successfully checked year
         print_string(serial_data,string_ok)
         print_crlf(serial_data)
      end if
   end if

 
   bigcal_add_days(bigcal_current_date,1)
   day_of_week=day_of_week+1
   if day_of_week==7 then
      day_of_week=0
   end if 
end loop

-- now, run the clock normally

bigcal_current_date.year=1999
bigcal_current_date.month=12
bigcal_current_date.day=31

bigcal_current_time.hour=23
bigcal_current_time.minute=58
bigcal_current_time.second=0

TMR1=0

T1CON_TMR1GE = false	-- no gate
T1CON_T1CKPS = 3	-- 1:8 prescaler
T1CON_TMR1CS = 0	-- internal clock
T1CON_TMR1ON = 1	-- aaaaand GO!

INTCON_GIE  = true
INTCON_PEIE = true
PIR1_TMR1IF = false
PIE1_TMR1IE = true	-- enable interrupt

var byte old_second=100

forever loop

  if old_second != bigcal_current_time.second then

    bigcal_update_current()    

    old_second = bigcal_current_time.second

    print_date()
    
    serial_data=" "
    print_byte_dec(serial_data,bigcal_current_time.hour)
    serial_data=":"
    print_byte_dec(serial_data,bigcal_current_time.minute)
    serial_data=":"
    print_byte_dec(serial_data,bigcal_current_time.second)



  end if
  

end loop




