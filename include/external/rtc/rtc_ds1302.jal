-- ------------------------------------------------------
-- Title: communication between rtc DS1302 chip and microcontroller
--
-- Author: Richard Zengerink,  Copyright (c) 2008, all rights reserved
--
-- Adapted-by: Rob Hamerling (2013, 2015), refactoring.
--
-- Compiler: 2.4q3
--
-- Revision: $Revision: 2760 $
--
-- This file is part of jallib (https://github.com/jallib/jallib)
-- Released under the ZLIB license (http://www.opensource.org/licenses/zlib-license.html)
--
-- Description: Library to handle DS1302 rtc chip
--
-- Sources:
--
-- Notes:
--
-- ----------------------------------------------------------------------------
-- constants declarations
-- ----------------------------------------------------------------------------

-- --- realtime clock hardware identification
const RTC_HW = 1302                                 -- DS1302 module


include rtc_common                                  -- common rtc functions and procedures


-- write-addresses of the registers
-- for read the least significant bit must be set

const  byte  rtc_reg_second_      = 0x80
const  byte  rtc_reg_minute_      = 0x82
const  byte  rtc_reg_hour_        = 0x84
const  byte  rtc_reg_dayofmonth_  = 0x86
const  byte  rtc_reg_month_       = 0x88
const  byte  rtc_reg_dayofweek_   = 0x8A
const  byte  rtc_reg_year_        = 0x8C
const  byte  rtc_reg_protect_     = 0x8E
const  byte  rtc_reg_trickle_     = 0x90
const  byte  rtc_reg_burst_clock_ = 0xBE
const  byte  rtc_reg_ram_         = 0xC0            -- first of 31 bytes
const  byte  rtc_reg_burst_ram_   = 0xFE


-- ----------------------------------------------------------------------------
-- private variable declarations exclusive for this library
-- in addition to variables declared in rtc_common.
-- ----------------------------------------------------------------------------

var  volatile  byte  rtc_protect_     = 0x00          -- no write protection
var  volatile  byte  rtc_trickle_     = 0b1010_0000   -- basic trickle pattern


-- ----------------------------------------------------------------------------
-- Declare and pre-format the trickle charge mask byte
-- according the constants defined in the application program.
-- Trickle charging of the backup battery will only be active
-- with rtc_diode value 1 or 2, and rtc_resistor value 2, 4 or 8.
-- Any other combination will result in no trickle charging, without warning!
-- ----------------------------------------------------------------------------
var  bit   rtc_trickle__rs0  at  rtc_trickle_ : 0
var  bit   rtc_trickle__rs1  at  rtc_trickle_ : 1
var  bit   rtc_trickle__ds0  at  rtc_trickle_ : 2
var  bit   rtc_trickle__ds1  at  rtc_trickle_ : 3

if defined(RTC_DIODE) then                         -- user specified
   if (RTC_DIODE == 1) then                          -- 1 diode
      rtc_trickle__ds0 = 1
   elsif (RTC_DIODE == 2) then                       -- 2 diodes
      rtc_trickle__ds1 = 1
   else
      _error "Invalid value of RTC_DIODE"
   end if
end if

if defined(rtc_resistor) then                      -- user specified
   if (RTC_RESISTOR == 2) then                     -- 2 kOhm
      rtc_trickle__rs0 = 1
   elsif (RTC_RESISTOR == 4) then                  -- 4 kOhm
      rtc_trickle__rs1 = 1
   elsif (RTC_RESISTOR == 8) then                  -- 8 kOhm
      rtc_trickle__rs0 = 1
      rtc_trickle__rs1 = 1
   else
      _error "Invalid value of RTC_RESISTOR"
   end if
end if


-- ----------------------------------------------------------------------
-- physical clock pulse  { high - 1us - low - 1us }
-- ----------------------------------------------------------------------
procedure rtc_clock_pulse_() is
   rtc_sclk = high
   _usec_delay(1)
   rtc_sclk = low
   _usec_delay(1)
end procedure

-- ----------------------------------------------------------------------------
-- physical read of byte from ds1302
-- ----------------------------------------------------------------------------
procedure rtc_read_byte_raw_(byte out data) is
   var bit db at data : 7                          -- MSb 
   rtc_sclk = LOW                                  -- clock initially low
   rtc_iodir = INPUT                               -- set ds1302 read mode
   for 7 loop
      db = rtc_io                                  -- read pin
      data = data >> 1                             -- next
      rtc_clock_pulse_()
   end loop
   db = rtc_io                                     -- last bit
   rtc_clock_pulse_()                              -- last clock 
end procedure

-- ----------------------------------------------------------------------
-- physical write of a byte to ds1302 (register or data)
-- ----------------------------------------------------------------------------
procedure rtc_write_byte_raw_(byte in data) is 
   var bit db at data : 0                          -- LSb 
   rtc_sclk = LOW                                  -- clock initially low
   rtc_iodir = OUTPUT                              -- set ds1302 to write mode
   for 8 loop
      if (db) then                                 -- 1-bit
         rtc_io = HIGH
      else
         rtc_io = LOW                              -- 0-bit
      end if
      rtc_clock_pulse_()
      data = data >> 1                             -- next bit
   end loop
end procedure

-- ----------------------------------------------------------------------------
-- Read specified data from a specified register
-- ----------------------------------------------------------------------------
procedure rtc_read_reg_(byte in register, byte out data) is
   var bit RD at register : 0                      -- read address 
   rtc_ce = HIGH                                   -- start of read
   RD = 1                                          -- set to read mode
   rtc_write_byte_raw_(register)                       -- set read address
   rtc_read_byte_raw_(data)
   rtc_ce = LOW                                    -- 
end procedure

-- ----------------------------------------------------------------------------
-- Write specified data to a specified register
-- ----------------------------------------------------------------------------
procedure rtc_write_reg_(byte in register, byte in data) is
   rtc_ce = HIGH                                   -- start of write
   rtc_write_byte_raw_(register)                   -- set write address
   rtc_write_byte_raw_(data)
   rtc_ce = LOW                                    -- 
end procedure


-- ----------------------------------------------------------------------------
-- read second value from rtc
-- ----------------------------------------------------------------------------
function rtc_read_second() return byte is
   var byte second 
   rtc_read_reg_(rtc_reg_second_, second)
   return (second & 0b0111_1111)                      -- strip Clock Halt bit
end function

-- ----------------------------------------------------------------------------
-- write second value to the rtc
-- ----------------------------------------------------------------------------
procedure rtc_write_second(byte in second) is
   var byte halt_state = rtc_read_second() & 0b1000_0000  
   rtc_write_reg_(rtc_reg_second_, second | halt_state)   -- preserve CH bit
end procedure


-- ----------------------------------------------------------------------------
-- read minute value from rtc
-- ----------------------------------------------------------------------------
function rtc_read_minute() return byte is 
   var byte minute 
   rtc_read_reg_(rtc_reg_minute_, minute)
   return (minute & 0b0111_1111)
end function

-- ----------------------------------------------------------------------------
-- write minute value to the rtc
-- ----------------------------------------------------------------------------
procedure rtc_write_minute(byte in minute) is
   rtc_write_reg_(rtc_reg_minute_, minute)
end procedure


-- ----------------------------------------------------------------------------
-- read hour value from rtc
-- ----------------------------------------------------------------------------
function rtc_read_hour() return byte is
   var byte hour
   rtc_read_reg_(rtc_reg_hour_, hour)
   return (hour & 0b0011_1111)                        -- 24-hour mode
end function

-- ----------------------------------------------------------------------------
-- write hour value to the rtc
-- ----------------------------------------------------------------------------
procedure rtc_write_hour(byte in hour) is
   rtc_write_reg_(rtc_reg_hour_, hour & 0b0011_1111)
end procedure


-- ----------------------------------------------------------------------------
-- read day of month value from rtc
-- ----------------------------------------------------------------------------
function rtc_read_dayofmonth() return byte is
   var byte dayofmonth
   rtc_read_reg_(rtc_reg_dayofmonth_, dayofmonth)
   return dayofmonth
end function

-- ----------------------------------------------------------------------------
-- write day of month value to the rtc
-- ----------------------------------------------------------------------------
procedure rtc_write_dayofmonth(byte in dayofmonth) is
   rtc_write_reg_(rtc_reg_dayofmonth_, dayofmonth & 0b0011_1111)
end procedure


-- ----------------------------------------------------------------------------
-- read month value from rtc
-- ----------------------------------------------------------------------------
function rtc_read_month() return byte is
   var byte month 
   rtc_read_reg_(rtc_reg_month_, month)
   return month
end function

-------------------------------------------------------------------------------
-- write month value to the rtc
-- ----------------------------------------------------------------------------
procedure rtc_write_month(byte in month) is
   rtc_write_reg_(rtc_reg_month_, month & 0b0001_1111)
end procedure


-- ----------------------------------------------------------------------------
-- read year value from rtc
-- ----------------------------------------------------------------------------
function rtc_read_year() return byte is
   var byte year 
   rtc_read_reg_(rtc_reg_year_, year)
   return year
end function

-- ----------------------------------------------------------------------------
-- write year value to the rtc
-- ----------------------------------------------------------------------------
procedure rtc_write_year(byte in year) is
   rtc_write_reg_(rtc_reg_year_, year)
end procedure


-- ----------------------------------------------------------------------------
-- read clock-write-protection state from rtc
-- ----------------------------------------------------------------------------
function rtc_read_protect() return bit is
   var byte protect
   var bit  protect_bit at protect : 7
   rtc_read_reg_(rtc_reg_protect_, protect)
   return protect_bit
end function

-- ----------------------------------------------------------------------------
-- write clock-write-protection state to rtc
-- ----------------------------------------------------------------------------
procedure rtc_write_protect(bit in flag) is
   var byte protect = 0b0000_0000
   if (flag == TRUE) then
      protect = 0b1000_0000
   end if
   rtc_write_reg_(rtc_reg_protect_, protect)
end procedure


-- ----------------------------------------------------------------------------
procedure rtc_stop() is
   var byte second = rtc_read_second()
   rtc_write_reg_(rtc_reg_second_, second | 0b1000_0000)  -- set clock halt bit
end procedure

-- ----------------------------------------------------------------------------
-- start the rtc
-- ----------------------------------------------------------------------------
procedure rtc_start() is
   var byte second = rtc_read_second()
   rtc_write_reg_(rtc_reg_second_, second & 0b0111_1111)  -- clear halt bit
end procedure


-- ----------------------------------------------------------------------------
-- initialize the rtc
-- ----------------------------------------------------------------------------
procedure rtc_init() is
   var byte hourbcd                                -- bcd code of hour
   var byte hourbin                                -- binary value of hour
   var bit  mode12h at hourbcd : 7                 -- 12/24 hour mode flag
   var bit  modepm/  at hourbcd : 5                 -- AM/PM flag
   rtc_ce = low                                    -- quiesce
   rtc_write_protect(FALSE)                        -- enable writes 
   hourbcd = rtc_read_hour()                       -- actual bcd value
   if  (mode12h == TRUE) then                      -- 12 hour mode
      hourbin = rtc_bcd2bin(hourbcd & 0b0001_1111)  -- hour value binary   
      if (hourbin == 12) then                      -- just after midnight or midday
         hourbin = 0                               -- 12 -> 0  in 24-hour notation
      end if
      if (modepm) then                             -- post meridiem
         hourbin = hourbin + 12                    -- to 24-hour value
      end if
      rtc_write_hour(rtc_bin2bcd(hourbin))         -- init hour in 24-hour mode
   end if
   rtc_write_reg_(rtc_reg_trickle_, rtc_trickle_)  -- program trickle charge 
   rtc_start()                                     -- make sure clock is running
end procedure



