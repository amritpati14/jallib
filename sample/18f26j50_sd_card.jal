-- Title: Library for communicating with SD memory cards
-- Author: Matthew Schinkel - borntechi.com, copyright (c) 2009, all rights reserved.
-- Adapted-by:
-- Compiler: >=2.4q5
--
-- This file is part of jallib (https://github.com/jallib/jallib)
-- Released under the BSD license (http://www.opensource.org/licenses/bsd-license.php)
--
-- Description: this library provides functions for SD memory cards.
--
-- Sources:
-- SanDisk Secure Digital Card - http://www.cs.ucr.edu/~amitra/sdcard/ProdManualSDCardv1.9.pdf
-- How to use MMC/SDC - http://forums.parallax.com/forums/attach.aspx?a=32012
--
-- This file has been generated by Matt's sample generator.
--

include 18f26j50                     -- target PICmicro
--
-- This program uses the internal oscillator with PLL active.
pragma target clock 48_000_000      -- oscillator frequency
--
pragma target OSC      INTOSC_NOCLKOUT_PLL       -- internal oscillator
pragma target PLLDIV   P2                        -- 8 MHz -> 4 MHz
pragma target CPUDIV   P1                        -- Fosc divisor
pragma target WDT      CONTROL                   -- watchdog
pragma target XINST    DISABLED                  -- extended instruction set
pragma target DEBUG    DISABLED                  -- debugging
pragma target FCMEN    DISABLED                  -- clock monitoring
pragma target IESO     DISABLED                  -- int/ext osc. switch
pragma target IOL1WAY disabled   -- Mapping allowed multiple times during runtime
--
-- The configuration bit settings above are only a selection, sufficient
-- for this program. Other programs may need more or different settings.
--
WDTCON_SWDTEN = OFF                 -- disable WDT
OSCCON_SCS = 0                      -- select primary oscillator
OSCTUNE_PLLEN = TRUE                -- use PLL
--
enable_digital_io()                 -- make all pins digital I/O
_usec_delay (100_000) -- wait for power to stablilize


include delay

-- setup uart for communication
const serial_hw_baudrate  = 115200   -- set the baudrate
include serial_hardware
serial_hw_init()
-- some aliases so it is easy to change from serial hw to serial sw.
alias serial_write is serial_hw_write
alias serial_read is serial_hw_read
alias serial_data is serial_hw_data
alias serial_data_available is serial_hw_data_available
--
-- include print
const PRINT_MAX_VAR_SIZE = 6
include print
include format
--
print_string(serial_data,"Jallib Sample Started...")
print_crlf(serial_data)


-- -----------------------------------------------------------------
-- Configure Remappable Pins on MSSP2 to match SPI/SD-Card wiring,
-- configure MSSP2 and initialize SD-card library
-- -----------------------------------------------------------------
include pps
-- PPS module writes are protected, we need to first unlock it
pps_control_lock(false)

-- RP6 <-> /SS2
PPS_MAP_SS2IN = RP6

-- RP4 <-> SCK2
PPS_MAP_RP4 = PPS_SCK2
PPS_MAP_SCK2IN = RP4

-- RP1 <-> SDI2
PPS_MAP_SDI2 = RP1

-- RP2 <-> SDO2
PPS_MAP_RP2 = PPS_SDO2

-- PPS configuration is done, we can lock again
pps_control_lock(true)

-- Now specify SPI pins aliases
alias pin_ss2_direction is pin_b3_direction
alias pin_ss2 is pin_b3
alias pin_sdi2_direction is pin_a1_direction
alias pin_sdo2_direction is pin_a5_direction
alias pin_sck2_direction is pin_b1_direction

-- setup SPI library
include spi_master_hw2         -- includes the spi library
-- define spi inputs/outputs
pin_sdi2_direction = input    -- spi input
pin_sdo2_direction = output   -- spi output
pin_sck2_direction = output   -- spi clock
--
spi2_init(SPI_MODE_11,SPI_RATE_FOSC_16) -- init spi, choose mode and speed
alias spi_master is spi_master_hw2
alias spi_master_exchange is spi_master_hw2_exchange
alias spi_master_set_mode is spi_master_hw2_set_mode
alias spi_master_set_speed is spi_master_hw2_set_speed
-- Alias SPI modes
alias spi_master_hw_set_mode_00 is spi_master_hw2_set_mode_00
alias spi_master_hw_set_mode_11 is spi_master_hw2_set_mode_11


-- setup 23k256 for external memory
-- setup chip select pin
ALIAS sram_23k256_chip_select             is pin_a1
ALIAS sram_23k256_chip_select_direction   is pin_a1_direction
-- initial settings
sram_23k256_chip_select_direction = output    -- chip select/slave select pin
sram_23k256_chip_select = high                -- start chip slect high (chip disabled)
-- initalize 23k256 in byte mode
alias sram_23k256_force_spi_mode is spi_master_hw_set_mode_00 -- always set spi mode to 0,0
include sram_23k256 -- setup Microchip 23k256 sram
sram_23k256_init(SRAM_23K256_SEQUENTIAL_MODE, SRAM_23K256_HOLD_DISABLE)  -- init 23k256 in sequential mode


-- setup the sd card pins
alias sd_chip_select is pin_SS2
alias sd_chip_select_direction is pin_SS2_direction
sd_chip_select = high
sd_chip_select_direction = output
--
-- setup the sd card library
alias sd_force_spi_mode is spi_master_hw_set_mode_11 -- always set spi mode to 1,1
const bit SD_ALWAYS_SET_SPI_MODE = TRUE
;const bit SD_READ_EXTRA_SPEED = TRUE -- extra read speed
;const bit SD_WRITE_EXTRA_SPEED = TRUE -- extra write speed
;const bit SD_DELAY_AFTER_WRITE = FALSE ;Try this if you are having troulbe with your card.
include sd_card              -- include the sd card ide hard disk library
sd_init()                    -- initialize startup settings


sd_error = SD_INIT_FAILURE
sd_error = SD_TIMED_OUT
if sd_has_error == TRUE then
   sd_print_error(serial_data)
else
   if sd_card_type == SD_STANDARD_CAPACITY then
      print_string(serial_data, "Standard capacity ")
   elsif sd_card_type == SD_HIGH_CAPACITY then
      print_string(serial_data, "High capacity ")
   end if
   print_string(serial_data, "SD card successfully loaded!\r\n")
end if

------------------------------------------------------------
-- START of PROGRAM
------------------------------------------------------------
_usec_delay(100_000)                  -- wait for power to settle

-- procedure for sending 80 "-----------------" via serial port
procedure seperator() is
   serial_data = 13
   serial_data = 10
   const byte str3[] = "--------------------------------------------------------------------------------"
   print_string(serial_data, str3)
   print_crlf(serial_data)
end procedure

-- Send something to the serial port
seperator()             -- send "----" via serial port
print_string(serial_data,"SD CARD SAMPLE STARTED")
print_crlf(serial_data)

-- variables for the sample
var word step1
var byte volatile data

seperator()            -- seperate the examples with "----"

print_string(serial_data,"SD Card Size (bytes): ")
print_dword_dec(serial_data,sd_number_of_sectors*SD_BYTE_PER_SECTOR)

seperator()            -- seperate the examples with "----"
--------------------------------------------------------------------------------
-- EXAMPLE #1 read sector 0 (the boot sector) & sector 1, one byte at a time
--------------------------------------------------------------------------------
sd_start_read(0)           -- get sd card ready for read at sector 0
for 512 * 2 loop           -- read 2 sectors (512 * 2 bytes)
  data = sd_data_byte      -- read 1 bytes of data
  serial_write(data)    -- send byte via serial port
end loop
sd_stop_read()             -- tell sd card you are done reading

seperator()                -- seperate the examples with "----"
_usec_delay(500_000)       -- a small delay
--------------------------------------------------------------------------------
-- EXAMPLE #2 write to a sector 1 byte at a time
--------------------------------------------------------------------------------
sd_start_write(20)         -- get sd card ready for write at sector 20
for 512 + 256 loop         -- loop 1 sector + 1 half sector (512 + 256 bytes)
  sd_data_byte = "A"       -- write 1 bytes of data
end loop
sd_stop_write()            -- tell sd card you are done reading
--
-- read the data back
sd_start_read(20)          -- get sd card ready for read at sector 20
for 512 + 256 loop         -- loop 1 sector + 1 half sector (512 + 256 bytes)
 data = sd_data_byte       -- read 1 bytes of data
  serial_write(data)    -- send byte via serial port
end loop
sd_stop_read()             -- tell sd card you are done reading

seperator()                -- seperate the examples with "----"
_usec_delay(500_000)       -- a small delay
;   --------------------------------------------------------------------------------
;   -- EXAMPLE #3 write to 2 sectors using a sector buffer at a address
;   -- user friendly and fastest.
;   --------------------------------------------------------------------------------
;   -- fill the sector buffer with data
;   for 512 using step1 loop                     -- loop till the end of the sector buffer
;      sd_sector_buffer[step1] = "B"             -- set each byte of data
;   end loop
;   -- write the sector buffer to sector 20
;   sd_write_sector_address(20)
;   for 512 using step1 loop                     -- loop till the end of the sector buffer
;      sd_sector_buffer[step1] = "C"             -- set each byte of data
;   end loop
;   -- write the sector buffer to sector 21
;   sd_write_sector_address(21)
;   --
;   -- read back the same sectors
;   -- read sector 20 into the sector buffer
;   sd_read_sector_address(20)
;   -- now send it to the serial port
;   for 512 using step1 loop                     -- loop till the end of the sector buffer
;      serial_write (sd_sector_buffer[step1]) -- send each byte via serial port
;   end loop
;   -- read sector 21 into the sector buffer
;   sd_read_sector_address(21)
;   -- now send it to the serial port
;   for 512 using step1 loop                     -- loop till the end of the sector buffer
;      serial_write (sd_sector_buffer[step1]) -- send each byte via serial port
;   end loop
;
;   seperator()                                  -- seperate the examples with "----"
;   _usec_delay(500_000)                         -- a small delay
;   --------------------------------------------------------------------------------
;   -- EXAMPLE #4 write to 2 sectors using a sector buffer. About the same speed as
;   -- example 3.
;   --------------------------------------------------------------------------------
;   -- get sd card ready for write at sector 20
;   sd_start_write(20)
;   -- fill the sector buffer with data
;   for 512 using step1 loop                   -- loop till the end of the sector buffer
;     sd_sector_buffer[step1] = "D"            -- set each byte of data
;   end loop
;   -- write the sector buffer to the sd card
;   sd_write_sector()
;   -- fill the sector buffer with new data
;   for 512 using step1 loop                   -- loop till the end of the sector buffer
;     sd_sector_buffer[step1] = "E"            -- set each byte of data
;   end loop
;   -- write the sector buffer to the sd card
;   sd_write_sector()                          -- write the buffer to the sd card
;   -- tell sd card you are done writing
;   sd_stop_write()
;   --
;   -- read back both of the same sectors
;   -- get sd card ready for read at sector 20
;   sd_start_read(20)
;   -- read the sector into the sector buffer
;   sd_read_sector()
;   -- now send it to the serial port
;   for 512 using step1 loop                   -- loop till the end of the sector buffer
;     serial_write(sd_sector_buffer[step1]) -- send each byte via serial port
;   end loop
;   -- read the next sector into the sector buffer
;   sd_read_sector()
;   -- now send it to the serial port
;   for 512 using step1 loop                   -- loop till the end of the sector buffer
;     serial_write(sd_sector_buffer[step1]) -- send each byte via serial port
;   end loop
;   sd_stop_read()                             -- tell sd card you are done reading




-------THE END!--------
