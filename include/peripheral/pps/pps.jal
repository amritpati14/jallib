-- ------------------------------------------------------------------------
-- Title: Peripheral Pin Select (PPS) library 
--
-- Author: Sebastion Lelong, Copyright (c) 2011, All rights reserved.
--         Rob Hamerling, Copyright (c) 2015, All rights reserved.
--
-- Adapted-by: 
--
-- Compiler: 2.4q3
--
-- Revision: $Revision$
--
-- This file is part of jallib (http://jallib.googlecode.com)
-- Released under the ZLIB license (http://www.opensource.org/licenses/zlib-license.html)
--
-- Description: This library supports Peripheral Pin Select of 3 major groups
-- of PICs, with significant differences in the PPS implementation:
--    - 18F PICs with PPS (18FXXJ11, 18FXXJ13, 18FXXJ50, 18FXXJ53)
--    - 18F PICs with PPS-light (high end PICs 18fxxj94/99)
--    - Enhanced Midrange (16f15xx, 16f16xx, 16f17xx, 16f18xxx and lf variants).
-- Within these groups there are minor differences, such that we distinguish
-- 5 PPS_GROUPS: PPS_1 for 18fxxj11, 18fxxj50
--               PPS_2 for 18fxxj13, 18fxxj53
--               PPS_3 for 18fxxj94, 1v8fxxj99
--               PPS_4 for 16f1xxx without PMD0 register
--               PPS_5 for 16f18xxx  with PMD0 register  
-- The actual PPS-group is specified in the device file of each PIC
--  (PPS_0 when the PIC has no PPS).
-- For all groups the basic rules with PPS are: 
--    * With OUTPUT a pin is assigned to a peripheral function
--    * with INPUT the peripheral function is assigned to a pin.
-- .
-- Using PPS to (re-)configure a PIC involves 3 stages: 
-- 1. The PPS module must be unlocked with: 
--       pps_control_lock(FALSE)
-- 2. Assign peripheral functions to specific pins. 
--    This stage is somewhat different for each of the major groups.
--    PPS_1 and PPS_2:
--       Example to (re)map pins TX2 and RX2 of the USART2 of a 18f27j53: 
--       To assign physical pin_B6 (alias pin_RP9) to the OUTPUT
--       of the USART2 (TX2) specify:
--             PPS_MAP_RP9 = PPS_TX2
--       To assign INPUT of the USART2 (RX2) to physical pin_B7
--       (alias RP10) specify:        
--             PPS_MAP_RX2 = RP10
--    PPS_3: 
--       Not supported yet.
--    PPS_4 and PPS_5:
--       Example to (re)map pins TX and RX of the USART of a 16f1708: 
--       To assign physical pin_B7 to the OUTPUT of the USART (TX) specify:
--             RC7PPS = PPS_TX
--       To assign INPUT of the USART (RX) to physical pin_B6 specify:        
--             RXPPS = PPS_RB6  
--    For all PPS groups holds: 
--      -  Multiple peripheral functions can be mapped while the
--         PPS module is unlocked. 
--      -  For bi-directional peripherals INPUT and OUTPUT must be
--         mapped to the same physical pin.   
-- 3. Finally the PPS module must be locked with:  
--       pps_control_lock(TRUE).
-- .
-- When 1-way locking is used with:  
--   - for groups PPS_1, 2 and 3:   pragma fuse_def IOL1WAY ENABLED 
--   - for groups 4 and 5:          pragma fuse_def PPS1WAY ENABLED
-- peripheral pins can be assigned only once. When the PPS module is locked 
-- again further changes are ignored (until reset or power-off). 
-- This is the default behaviour of the PIC!
-- When more than one unlock/remap/lock sequence is required specify:
--   for groups PPS_1, 2 and 3:  pragma fuse_def IOL1WAY DISABLED 
--   for groups PPS_4 and 5:     pragma fuse_def PPS1WAY DISABLED  
--
-- Sources: Microchip TB3130 - Peripheral Pin Select in 8-Bit Microcontrollers Technical Brief
--                    TB3098 - PIC16F170X Peripheral Pin Select (PPS) Technical Brief
--                    Datasheets of the applicable PICs
--
-- Notes: - This library is the original PPS library by Sebastien Lelong for
--          the 18Fs, extended by Rob Hamerling for the Enhanced Midrange.
--      
-- ------------------------------------------------------------------------
var bit pps_gie_state                     -- interrupt state at unlock
-- ---------------------------------------------------------------
-- Title:  Unlock/Lock the PPS module.  
-- Input:  Desired PPS lock state (bit: TRUE == locked, FALSE == unlocked)
-- Returns: (nothing)
-- Notes:  - Applies to all PPS-groups, differences are taken care of.
--         - Interrupts are disabled during the unlocked state.
-- ---------------------------------------------------------------
procedure pps_control_lock(bit in state) is
   
   if ((PPS_GROUP == PPS_1) | (PPS_GROUP == PPS_2) | (PPS_GROUP == PPS_3)) then
      if (state == TRUE) then             -- lock PPS module
         EECON2 = 0x55                    
         EECON2 = 0xAA
         PPSCON_IOLOCK = TRUE
         INTCON_GIE = pps_gie_state       -- restore interrupt state
      else                                -- (state == FALSE) unlock PPS module
         pps_gie_state = INTCON_GIE       -- save current interrupt state
         INTCON_GIE = FALSE               -- disable interrupts
         EECON2 = 0x55
         EECON2 = 0xAA
         PPSCON_IOLOCK = FALSE
      end if   
            
   elsif ((PPS_GROUP == PPS_4) | (PPS_GROUP == PPS_5)) then  
      if (state == TRUE) then             -- lock PPS module   
         PPSLOCK = 0x55
         PPSLOCK = 0xAA
         PPSLOCK_PPSLOCKED = TRUE
         INTCON_GIE = pps_gie_state       -- restore interrupt state
      else                                -- (state == FALSE) unlock PPS module       
         pps_gie_state = INTCON_GIE       -- save current interrupt state
         INTCON_GIE = FALSE               -- disable interrupts             
         PPSLOCK = 0x55
         PPSLOCK = 0xAA
         PPSLOCK_PPSLOCKED = FALSE   
      end if
      
   end if
  
end procedure



-- =================================================================
-- Symbolic definitions for peripheral functions and pin selections
-- =================================================================

-- ----------------------------
-- OUTPUT FUNCTION CONSTANTS 
-- ----------------------------
if ((PPS_GROUP == PPS_1) | (PPS_GROUP == PPS_2)) then
   -- For 18Fs (18FxxJ11, 18FxxJ13, 18FxxJ50, 18FxxJ53)
   alias PPS_MAP_RP0  is RPOR0_RPOR
   alias PPS_MAP_RP1  is RPOR1_RPOR
   alias PPS_MAP_RP2  is RPOR2_RPOR
   alias PPS_MAP_RP3  is RPOR3_RPOR
   alias PPS_MAP_RP4  is RPOR4_RPOR
   alias PPS_MAP_RP5  is RPOR5_RPOR
   alias PPS_MAP_RP6  is RPOR6_RPOR
   alias PPS_MAP_RP7  is RPOR7_RPOR
   alias PPS_MAP_RP8  is RPOR8_RPOR
   alias PPS_MAP_RP9  is RPOR9_RPOR
   alias PPS_MAP_RP10 is RPOR10_RPOR
   alias PPS_MAP_RP11 is RPOR11_RPOR
   alias PPS_MAP_RP12 is RPOR12_RPOR
   alias PPS_MAP_RP13 is RPOR13_RPOR
   -- not available in all PICs
   if defined(RPOR14_RPOR) then
      alias PPS_MAP_RP14 is RPOR14_RPOR
   end if
   if defined(RPOR15_RPOR) then
      alias PPS_MAP_RP15 is RPOR15_RPOR
   end if
   if defined(RPOR16_RPOR) then
      alias PPS_MAP_RP16 is RPOR16_RPOR
   end if
   alias PPS_MAP_RP17 is RPOR17_RPOR
   alias PPS_MAP_RP18 is RPOR18_RPOR
   if defined(RPOR19_RPOR) then
      alias PPS_MAP_RP19 is RPOR19_RPOR
   end if
   if defined(RPOR20_RPOR) then
      alias PPS_MAP_RP20 is RPOR20_RPOR
   end if
   if defined(RPOR21_RPOR) then
      alias PPS_MAP_RP21 is RPOR21_RPOR
   end if
   if defined(RPOR22_RPOR) then
      alias PPS_MAP_RP22 is RPOR22_RPOR
   end if
   if defined(RPOR23_RPOR) then
      alias PPS_MAP_RP23 is RPOR23_RPOR
   end if
   if defined(RPOR24_RPOR) then
      alias PPS_MAP_RP24 is RPOR24_RPOR
   end if
end if
   
-- OUTPUT function constants

if (PPS_GROUP == PPS_1) then
   -- For 18Fs (18FxxJ11, 18FxxJ50)
   const byte PPS_NULL    = 0    -- Disable RPn output function
   const byte PPS_C1OUT   = 1    -- Comparator 1 Output
   const byte PPS_C2OUT   = 2    -- Comparator 2 Output
   const byte PPS_TX2CK2  = 5    -- EUSART2 Asynchronous Transmit/Synchronous clock
   const byte PPS_TX2     = 5    -- EUSART2 Asynchronous Transmit
   const byte PPS_CK2     = 5    -- EUSART2 Synchronous Clock Output
   const byte PPS_DT2     = 6    -- EUSART2 Synchronous Transmit
   const byte PPS_SDO2    = 9    -- SPI2 Data Output
   const byte PPS_SCK2    = 10   -- SPI2 Clock Output
   const byte PPS_SSDMA   = 12   -- SPI DMA Slave Select
   const byte PPS_ULPOUT  = 13   -- Ultra Low-Power Wake-Up Event
   const byte PPS_CCP1    = 14   -- ECCP1 Compare
   const byte PPS_P1A     = 14   -- ECCP1 PWM Output Channel A
   const byte PPS_P1B     = 15   -- ECCP1 PWM Output Channel B
   const byte PPS_P1C     = 16   -- ECCP2 PWM Output Channel C
   const byte PPS_P1D     = 17   -- ECCP1 PWM Output Channel D
   const byte PPS_CCP2    = 18   -- ECCP2 Compare 
   const byte PPS_P2A     = 18   -- ECCP2 PWM Output Channel A   
   const byte PPS_P2B     = 19   -- ECCP2 PWM Output Channel B
   const byte PPS_P2C     = 20   -- ECCP2 PWM Output Channel C
   const byte PPS_P2D     = 21   -- ECCP2 PWM Output Channel D
end if   
   
if (PPS_GROUP == PPS_2) then
   -- For 18Fs (18FxxJ13, 18FxxJ53)
   const byte PPS_NULL    = 0    -- Disable RPn output function
   const byte PPS_C1OUT   = 1    -- Comparator 1 Output
   const byte PPS_C2OUT   = 2    -- Comparator 2 Output
   const byte PPS_C3OUT   = 3    -- Comparator 3 Output
   const byte PPS_TX2CK2  = 6    -- EUSART2 Asynchronous Transmit/Synchronous clock
   const byte PPS_TX2     = 6    -- EUSART2 Asynchronous Transmit
   const byte PPS_CK2     = 6    -- EUSART2 Synchronous Clock Output
   const byte PPS_DT2     = 7    -- EUSART2 Synchronous Transmit
   const byte PPS_SDO2    = 10   -- SPI2 Data Output
   const byte PPS_SCK2    = 11   -- SPI2 Clock Output
   const byte PPS_SSDMA   = 12   -- SPI DMA Slave Select
   const byte PPS_ULPOUT  = 13   -- Ultra Low-Power Wake-Up Event
   const byte PPS_CCP1    = 14   -- ECCP1 Compare 
   const byte PPS_P1A     = 14   -- ECCP1 PWM Output Channel A
   const byte PPS_P1B     = 15   -- ECCP1 PWM Output Channel B
   const byte PPS_P1C     = 16   -- ECCP1 PWM Output Channel C
   const byte PPS_P1D     = 17   -- ECCP1 PWM Output Channel D
   const byte PPS_CCP2    = 18   -- ECCP2 Compare
   const byte PPS_P2A     = 18   -- ECCP2 PWM Output Channel A
   const byte PPS_P2B     = 19   -- ECCP2 PWM Output Channel B
   const byte PPS_P2C     = 20   -- ECCP2 PWM Output Channel C
   const byte PPS_P2D     = 21   -- ECCP2 PWM Output Channel D
   const byte PPS_CCP3    = 22   -- ECCP3 Compare 
   const byte PPS_P3A     = 22   -- ECCP3 PWM Output Channel A
   const byte PPS_P3B     = 23   -- ECCP3 PWM Output Channel B
   const byte PPS_P3C     = 24   -- ECCP3 PWM Output Channel C
   const byte PPS_P3D     = 25   -- ECCP3 PWM Output Channel D
end if   

if (PPS_GROUP == PPS_3)
   _error "The PPS_GROUP (PPS_3) of this PIC is not supported yet"
end if

if (PPS_GROUP == PPS_4) then
   -- For Enhanced Midrange (16f1xxx without PMD0 register)
   const byte PPS_NULL     = 0b000_00000        -- unmap the pin
   -- reserved             = 0b000_00001 
   -- reserved             = 0b000_00010 
   const byte PPS_NCO1OUT  = 0b000_00011
   const byte PPS_LC1OUT   = 0b000_00100
   const byte PPS_LC2OUT   = 0b000_00101
   const byte PPS_LC3OUT   = 0b000_00110
   const byte PPS_LC4OUT   = 0b000_00111
   const byte PPS_COG1A    = 0b000_01000
   const byte PPS_COG1B    = 0b000_01001
   const byte PPS_COG1C    = 0b000_01010
   const byte PPS_COG1D    = 0b000_01011
   const byte PPS_CCP1     = 0b000_01100
   const byte PPS_CCP2     = 0b000_01101
   const byte PPS_PWM3OUT  = 0b000_01110
   const byte PPS_PWM4OUT  = 0b000_01111
   const byte PPS_SCK      = 0b000_10000
   const byte PPS_SCL      = 0b000_10000
   const byte PPS_SDA      = 0b000_10001
   const byte PPS_SDO      = 0b000_10001
   -- reserved             = 0b000_10010 
   -- reserved             = 0b000_10011 
   const byte PPS_TX       = 0b000_10100
   const byte PPS_CK       = 0b000_10100
   const byte PPS_DT       = 0b000_10101
   const byte PPS_C1OUT    = 0b000_10110  
   const byte PPS_C2OUT    = 0b000_10111     
end if
   
if (PPS_GROUP == PPS_5) then
   -- For Enhanced Midrange (16f1xxx with PMD0 register)
   const byte PPS_NULL     = 0b000_00000        -- unmap the pin
   const byte PPS_CLC1OUT  = 0b000_00001 
   const byte PPS_CLC2OUT  = 0b000_00010 
   const byte PPS_CLC3OUT  = 0b000_00011
   const byte PPS_CLC4OUT  = 0b000_00100
   const byte PPS_CWG1A    = 0b000_00101
   const byte PPS_CWG1B    = 0b000_00110
   const byte PPS_CWG1C    = 0b000_00111
   const byte PPS_CWG1D    = 0b000_01000
   const byte PPS_CCP1     = 0b000_01001
   const byte PPS_CCP2     = 0b000_01010
   const byte PPS_CCP3     = 0b000_01011
   const byte PPS_CCP4     = 0b000_01100
   const byte PPS_CCP5     = 0b000_01101
   const byte PPS_PWM6OUT  = 0b000_01110
   const byte PPS_PWM7OUT  = 0b000_01111
   const byte PPS_TX       = 0b000_10000
   const byte PPS_CK       = 0b000_10000 
   const byte PPS_DT       = 0b000_10001
   const byte PPS_C1OUT    = 0b000_10010
   const byte PPS_C2OUT    = 0b000_10011 
   const byte PPS_SCK1     = 0b000_10100
   const byte PPS_SCL1     = 0b000_10100
   const byte PPS_SDO1     = 0b000_10101
   const byte PPS_SDA1     = 0b000_10101
   const byte PPS_SCK2     = 0b000_10110
   const byte PPS_SCL2     = 0b000_10110
   const byte PPS_SDO2     = 0b000_10111
   const byte PPS_SDA2     = 0b000_10111
   const byte PPS_TMR0     = 0b000_11000
   const byte PPS_NCO      = 0b000_11001  
   const byte PPS_CLKR     = 0b000_11010
   const byte PPS_DSM      = 0b000_11011
   const byte PPS_CWG2A    = 0b000_11100
   const byte PPS_CWG2B    = 0b000_11101
   const byte PPS_CWG2C    = 0b000_11110
   const byte PPS_CWG2D    = 0b000_11111
   const byte PPS_CWG3A    = 0b001_00000
   const byte PPS_CWG3B    = 0b001_00001
   const byte PPS_CWG3C    = 0b001_00010
   const byte PPS_CWG3D    = 0b001_00011
   const byte PPS_ADGRDA   = 0b001_00100
   const byte PPS_ASGRDG   = 0b001_00101
   
end if     

-- -----------------
-- INPUT FUNCTION 
-- -----------------

if ((PPS_GROUP == PPS_1) | (PPS_GROUP == PPS_2)) then
   -- For 18Fs (18FXXJ11, 18FXXJ13, 18FXXJ50, 18FXXJ53)
   -- Remappeble pins enum constants, so you can use e.g. RP10 instead of 10
   const byte RP0  = 0
   const byte RP1  = 1
   const byte RP2  = 2
   const byte RP3  = 3
   const byte RP4  = 4
   const byte RP5  = 5
   const byte RP6  = 6
   const byte RP7  = 7
   const byte RP8  = 8
   const byte RP9  = 9
   const byte RP10 = 10
   const byte RP11 = 11
   const byte RP12 = 12
   const byte RP13 = 13
   const byte RP14 = 14
   const byte RP15 = 15
   const byte RP16 = 16
   const byte RP17 = 17
   const byte RP18 = 18
   const byte RP19 = 19
   const byte RP20 = 20
   const byte RP21 = 21
   const byte RP22 = 22
   const byte RP23 = 23
   const byte RP24 = 24
   
   -- Input function mapping
   alias PPS_MAP_INT1   is RPINR1_INT1       -- External Interrupt 1
   alias PPS_MAP_INT2   is RPINR2_INT2       -- External Interrupt 2
   alias PPS_MAP_INT3   is RPINR3_INT3       -- External Interrupt 3
   alias PPS_MAP_T0CKI  is RPINR4_T0CKI      -- Timer0 External Clock Input
   alias PPS_MAP_T3CKI  is RPINR6_T3CKI      -- Timer3 External Clock Input
   alias PPS_MAP_CCP1   is RPINR7_IC1        -- Input Capture 1
   alias PPS_MAP_CCP2   is RPINR8_IC2        -- Input Capture 2
   alias PPS_MAP_T1G    is RPINR12_T1G       -- Timer1 Gate Input
   alias PPS_MAP_T3G    is RPINR13_T3G       -- Timer3 Gate Input
   alias PPS_MAP_RX2DT2 is RPINR16_RX2DT2    -- EUSART2 RX2/DT2
   alias PPS_MAP_CK2    is RPINR17_CK2       -- EUSART2 CK2
   alias PPS_MAP_SDI2   is RPINR21_SDI2      -- SPI2 Data Input
   alias PPS_MAP_SCK2IN is RPINR22_SCK2      -- SPI2 Clock Input
   alias PPS_MAP_SS2IN  is RPINR23_SS2       -- SPI2 Slave Select Input
   alias PPS_MAP_FLT0   is RPINR24_FLT0      -- PWM Fault Input
   -- not available in all PICs
   if defined(RPINR9_IC3) then
      alias PPS_MAP_CCP3 is RPINR9_IC3       -- Input Capture 3
   end if
   if defined(RPINR14_T5G) then
      alias PPS_MAP_T5G is RPINR14_T5G       -- Timer5 Gate Input
   end if
   if defined(RPINR15_T5CKI) then
      alias PPS_MAP_T5CKI is RPINR15_T5CKI   -- Timer5 External Clock Input
   end if
end if
 

if (PPS_GROUP == PPS_3)
   _error "The PPS_GROUP (PPS_3) of this PIC is not supported yet"
end if

if ((PPS_GROUP == PPS_4) | (PPS_GROUP == PPS_5)) then
   -- For Enhanced Midrange (16f1xxx)
   -- Note: Not all PICs have all (re-mappable) pins as defined below.
   const byte PPS_RA0      = 0b000_00000     
   const byte PPS_RA1      = 0b000_00001
   const byte PPS_RA2      = 0b000_00010
   const byte PPS_RA3      = 0b000_00011
   const byte PPS_RA4      = 0b000_00100
   const byte PPS_RA5      = 0b000_00101
   const byte PPS_RA6      = 0b000_00110
   const byte PPS_RA7      = 0b000_00111

   const byte PPS_RB0      = 0b000_01000     
   const byte PPS_RB1      = 0b000_01001
   const byte PPS_RB2      = 0b000_01010
   const byte PPS_RB3      = 0b000_01011
   const byte PPS_RB4      = 0b000_01100
   const byte PPS_RB5      = 0b000_01101
   const byte PPS_RB6      = 0b000_01110
   const byte PPS_RB7      = 0b000_01111

   const byte PPS_RC0      = 0b000_10000     
   const byte PPS_RC1      = 0b000_10001
   const byte PPS_RC2      = 0b000_10010
   const byte PPS_RC3      = 0b000_10011
   const byte PPS_RC4      = 0b000_10100
   const byte PPS_RC5      = 0b000_10101
   const byte PPS_RC6      = 0b000_10110
   const byte PPS_RC7      = 0b000_10111

   const byte PPS_RD0      = 0b000_11000     
   const byte PPS_RD1      = 0b000_11001
   const byte PPS_RD2      = 0b000_11010
   const byte PPS_RD3      = 0b000_11011
   const byte PPS_RD4      = 0b000_11100
   const byte PPS_RD5      = 0b000_11101
   const byte PPS_RD6      = 0b000_11110
   const byte PPS_RD7      = 0b000_11111

   const byte PPS_RE0      = 0b001_00000
   const byte PPS_RE1      = 0b001_00001
   const byte PPS_RE2      = 0b001_00010
   const byte PPS_RE3      = 0b001_00011
end if






